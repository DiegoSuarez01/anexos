# --------------------------------------
# IMPORTAMOS BIBLIOTECAS NECESARIAS
# --------------------------------------

import pdfplumber  # Para leer el contenido de archivos PDF de forma m치s precisa que PyMuPDF
import nltk  # Herramienta de procesamiento de lenguaje natural (Natural Language Toolkit)
from nltk import sent_tokenize, word_tokenize, ne_chunk, pos_tag  # Funciones 칰tiles para analizar texto
from nltk.tree import Tree  # Para analizar entidades nombradas como nombres de personas
import tkinter as tk  # Interfaz gr치fica de usuario
from tkinter import filedialog  # Para permitir al usuario seleccionar archivos desde el explorador

# Descargamos los recursos de NLTK (solo se hace una vez, la primera vez que se ejecuta el c칩digo)
nltk.download('punkt')  # Necesario para dividir texto en oraciones y palabras
nltk.download('averaged_perceptron_tagger')  # Para etiquetar palabras seg칰n su funci칩n gramatical
nltk.download('maxent_ne_chunker')  # Para detectar entidades nombradas como personas o lugares
nltk.download('words')  # Diccionario de palabras en ingl칠s, usado por NLTK internamente

# --------------------------------------
# FUNCIONES DE EXTRACCI칍N DE TEXTO CON PDFPLUMBER
# --------------------------------------
def extraer_texto_pdf(ruta_pdf):
    """
    Esta funci칩n abre el archivo PDF usando pdfplumber y extrae todo el texto
    de manera limpia, p치gina por p치gina. Se a침ade doble salto de l칤nea para simular p치rrafos.
    """
    texto = ""
    with pdfplumber.open(ruta_pdf) as pdf:
        for pagina in pdf.pages:
            contenido = pagina.extract_text()
            if contenido:
                texto += contenido + "\n\n"  # Separamos p치rrafos con doble salto
    return texto
# --------------------------------------
# FUNCIONES USANDO NLTK
# --------------------------------------
def extraer_titulo(texto):
    """
    Esta funci칩n intenta capturar el t칤tulo desde las primeras l칤neas del texto.
    Se asume que el t칤tulo est치 en las primeras 3 l칤neas del documento.
    """
    lineas = texto.strip().split("\n")
    primeras = [l.strip() for l in lineas if l.strip()][:3]
    return " ".join(primeras) if primeras else "T칤tulo no encontrado"

def extraer_autor(texto):
    """
    Esta funci칩n analiza las primeras oraciones del texto para detectar un nombre propio
    usando NLTK. Busca estructuras tipo 'Nombre Apellido'.
    """
    oraciones = sent_tokenize(texto)
    for oracion in oraciones[:5]:  # Solo analiza las 5 primeras oraciones
        palabras = word_tokenize(oracion)
        etiquetas = pos_tag(palabras)  # Clasifica palabras: sustantivo, verbo, etc.
        entidades = ne_chunk(etiquetas)  # Busca entidades nombradas como nombres de personas
        for chunk in entidades:
            if isinstance(chunk, Tree) and chunk.label() == 'PERSON':
                nombre = " ".join(c[0] for c in chunk)
                if len(nombre.split()) >= 2:
                    return nombre
    return "Autor no encontrado"

def extraer_director(texto):
    """
    Esta funci칩n busca una l칤nea que mencione al director, tutor o asesor del trabajo.
    No es muy precisa, pero funciona si esas palabras aparecen claramente en el texto.
    """
    claves = ['director', 'asesor', 'tutor']
    for linea in texto.lower().split("\n"):
        if any(clave in linea for clave in claves):
            return linea.strip().capitalize()
    return "Director no encontrado"

def extraer_parrafos(texto, seccion, num_parrafos=2):
    """
    Esta funci칩n busca una secci칩n como 'metodolog칤a' o 'conclusiones' dentro del texto.
    Luego extrae los primeros p치rrafos despu칠s de encontrar esa secci칩n.
    """
    texto = texto.lower()
    seccion = seccion.lower()
    if seccion in texto:
        contenido = texto.split(seccion, 1)[-1].strip()  # Se queda con lo que viene despu칠s del t칤tulo de secci칩n
        contenido = contenido.split("\n\n")  # Se divide en p치rrafos seg칰n los saltos de l칤nea

        parrafos = []
        for bloque in contenido:
            limpio = bloque.strip().replace("\n", " ")  # Elimina saltos dentro del p치rrafo
            if len(limpio.split()) > 10:  # Filtra p치rrafos con poco texto
                parrafos.append(limpio)
            if len(parrafos) == num_parrafos:
                break

        return "\n\n".join(parrafos) if parrafos else f"{seccion.capitalize()} no encontrada."
    return f"{seccion.capitalize()} no encontrada."

# --------------------------------------
# FUNCI칍N PRINCIPAL DE EXTRACCI칍N
# --------------------------------------
def extraer_info(texto):
    """
    Llama a las funciones de extracci칩n para obtener informaci칩n clave del texto.
    Devuelve un diccionario con los resultados.
    """
    return {
        "T칤tulo": extraer_titulo(texto),
        "Autor": extraer_autor(texto),
        "Director": extraer_director(texto),
        "Metodolog칤a": extraer_parrafos(texto, "metodolog칤a", num_parrafos=1),
        "Conclusiones": extraer_parrafos(texto, "conclusiones", num_parrafos=1)
    }

# --------------------------------------
# INTERFAZ PARA SELECCI칍N DE ARCHIVOS
# --------------------------------------
def seleccionar_multiples_pdfs():
    """
    Abre una ventana de interfaz gr치fica para que el usuario seleccione uno o varios archivos PDF.
    Luego procesa cada archivo y muestra la informaci칩n extra칤da en consola.
    """
    root = tk.Tk()  # Crea la ventana
    root.geometry("400x150")
    root.title("Seleccionar PDFs")

    def abrir():
        archivos = filedialog.askopenfilenames(filetypes=[("PDFs", "*.pdf")])  # Selector de archivos
        if archivos:
            for archivo in archivos:
                print(f"\n游늯 Procesando: {archivo}\n")
                texto = extraer_texto_pdf(archivo)
                info = extraer_info(texto)
                for clave, valor in info.items():
                    print(f"游댳 {clave}:\n{valor}\n")
                print("=" * 60)
        else:
            print("丘멆잺 No se seleccionaron archivos.")
        root.destroy()  # Cierra la ventana despu칠s de seleccionar

    # Bot칩n para iniciar la selecci칩n de PDFs
    tk.Button(root, text="Seleccionar PDFs", command=abrir,
              font=("Arial", 12), bg="green", fg="white").pack(pady=50)
    root.mainloop()

seleccionar_multiples_pdfs()
